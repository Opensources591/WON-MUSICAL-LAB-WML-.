import { NextResponse } from "next/server"

export async function POST(req: Request) {
  // --- NEW: move env-var guard here ---------------------------------
  if (!process.env.CROSSMINT_CLIENT_ID || !process.env.CROSSMINT_API_KEY || !process.env.REVETH_WALLET_ADDRESS) {
    return new NextResponse(
      "Crossmint not configured. Set CROSSMINT_CLIENT_ID, CROSSMINT_API_KEY and REVETH_WALLET_ADDRESS in .env.local.",
      { status: 500 },
    )
  }
  // ------------------------------------------------------------------
  try {
    // In a real app, you might get the recipient wallet from the logged-in user
    // or a form input. For this example, we use the provided REVETH_WALLET_ADDRESS.
    const recipientWallet = process.env.REVETH_WALLET_ADDRESS

    // Example NFT metadata - customize as needed
    const nftMetadata = {
      name: "RevNet Labs Voice NFT",
      image: "https://i.ibb.co/7xT76Wrd/file-00000000f174620ab890ed9a196c674f.png", // Example image, could be dynamic
      description: "An exclusive NFT from RevNet Labs, celebrating voice AI innovation.",
      attributes: [{ trait_type: "Generated By", value: "RevNet Labs AI" }],
    }

    const crossmintResponse = await fetch("https://www.crossmint.com/api/2022-06-09/collections/default/nfts", {
      method: "POST",
      headers: {
        "X-CLIENT-SECRET": process.env.CROSSMINT_API_KEY,
        "X-PROJECT-ID": process.env.CROSSMINT_CLIENT_ID,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        recipient: `email:${recipientWallet}:polygon`, // Example: mint to an email on Polygon
        metadata: nftMetadata,
      }),
    })

    if (!crossmintResponse.ok) {
      const errorData = await crossmintResponse.json()
      console.error("Crossmint API error:", errorData)
      return new NextResponse(`Crossmint API error: ${errorData.message || crossmintResponse.statusText}`, {
        status: crossmintResponse.status,
      })
    }

    const data = await crossmintResponse.json()
    return NextResponse.json({ success: true, data })
  } catch (error: any) {
    console.error("Error minting NFT:", error)
    return new NextResponse(`Error minting NFT: ${error.message}`, { status: 500 })
  }
}
